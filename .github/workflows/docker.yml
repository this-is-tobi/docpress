name: Build Docker

on:
  workflow_call:
    inputs:
      REGISTRY_NAMESPACE:
        required: true
        type: string
      MULTI_ARCH:
        required: true
        type: boolean
      PR_NUMBER:
        required: false
        type: string
      TAG:
        required: false
        type: string
      MAJOR_TAG:
        required: false
        type: string
      MINOR_TAG:
        required: false
        type: string
      PATCH_TAG:
        required: false
        type: string
      USE_QEMU:
        required: true
        type: boolean
  workflow_dispatch:
    inputs:
      REGISTRY_NAMESPACE:
        description: Target registry  and namespace to push images
        required: true
        type: string
        default: ghcr.io/this-is-tobi/docpress
      MULTI_ARCH:
        description: Build for both amd64 and arm64
        required: true
        type: boolean
        default: false
      USE_QEMU:
        description: Use QEMU emulator for arm64
        required: true
        type: boolean
        default: true

permissions:
  packages: write

jobs:
  infos:
    name: Generate infos
    runs-on: ubuntu-latest
    outputs:
      build-matrix: ${{ steps.infos.outputs.BUILD_MATRIX }}
      lower-branch: ${{ steps.infos.outputs.LOWER_BRANCH }}
      short-sha: ${{ steps.infos.outputs.SHORT_SHA }}
      registry-domain: ${{ steps.infos.outputs.REGISTRY_DOMAIN }}
      registry-user: ${{ steps.infos.outputs.REGISTRY_USER }}
    steps:
    - name: Checks-out repository
      uses: actions/checkout@v4

    - name: Get variables
      id: infos
      run: |
        echo "BUILD_MATRIX=$(jq -c . < ./ci/matrix/docker.json)" >> $GITHUB_OUTPUT
        echo "LOWER_BRANCH=$(echo '${{ github.head_ref }}' | sed 's/\//-/g' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
        echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "REGISTRY_DOMAIN=$(echo '${{ inputs.REGISTRY_NAMESPACE }}' | cut -d "/" -f 1)" >> $GITHUB_OUTPUT
        echo "REGISTRY_USER=$(echo '${{ inputs.REGISTRY_NAMESPACE }}' | cut -d "/" -f 2)" >> $GITHUB_OUTPUT

  build:
    name: Build CLI Docker image
    runs-on: ${{ matrix.runners }}
    needs:
    - infos
    strategy:
      matrix:
        runners: ${{ inputs.MULTI_ARCH && !inputs.USE_QEMU && fromJson('["ubuntu-latest", "ARM64"]') || fromJson('["ubuntu-latest"]') }}
        images: ${{ fromJSON(needs.infos.outputs.build-matrix) }}
    steps:
    - name: Checks-out repository
      uses: actions/checkout@v4

    - name: Set up Docker buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: buildx-${{ runner.os }}-${{ runner.arch }}-${{ matrix.images.name }}-${{ hashFiles('src/**') }}
        restore-keys: |
          buildx-${{ runner.os }}-${{ runner.arch }}-${{ matrix.images.name }}-

    - name: Set up QEMU (for multi platform build)
      uses: docker/setup-qemu-action@v3
      if: ${{ inputs.USE_QEMU }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ needs.infos.outputs.registry-domain }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        logout: true

    - name: Build and push docker image
      id: build
      uses: docker/build-push-action@v6
      with:
        context: ${{ matrix.images.build.context }}
        file: ${{ matrix.images.build.dockerfile }}
        provenance: false
        platforms: ${{ inputs.MULTI_ARCH && inputs.USE_QEMU && 'linux/amd64,linux/arm64' || (contains(runner.arch, 'ARM') && 'linux/arm64' || 'linux/amd64') }}
        outputs: type=image,name=${{ needs.infos.outputs.registry-domain }}/${{ needs.infos.outputs.registry-user }}/${{ matrix.images.name }},push-by-digest=true,name-canonical=true,push=true
        build-args: |
          API__VERSION=${{ inputs.TAG || needs.infos.outputs.short-sha }}
        # cache-from: type=gha
        # cache-to: type=gha,mode=max
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new

      # Necessary to avoid forever growing cache
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Export digest
      run: |
        mkdir -p /tmp/digests/${{ matrix.images.name }}
        digest="${{ steps.build.outputs.digest }}"
        touch "/tmp/digests/${{ matrix.images.name }}/${digest#sha256:}"

    - name: Upload digest
      uses: actions/upload-artifact@v4
      with:
        name: digests-${{ matrix.images.name }}-${{ inputs.MULTI_ARCH && inputs.USE_QEMU && 'linux-amd64_linux-arm64' || (contains(runner.arch, 'ARM') && 'linux-arm64' || 'linux-amd64') }}
        path: /tmp/digests/${{ matrix.images.name }}/*
        if-no-files-found: error
        retention-days: 1

  merge:
    name: Merge digest
    runs-on: ubuntu-latest
    needs:
    - infos
    - build
    strategy:
      matrix:
        images: ${{ fromJSON(needs.infos.outputs.build-matrix) }}
    steps:
    - name: Download digests
      uses: actions/download-artifact@v4
      with:
        pattern: digests-${{ matrix.images.name }}-*
        path: /tmp/digests/${{ matrix.images.name }}
        merge-multiple: true

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ needs.infos.outputs.registry-domain }}/${{ needs.infos.outputs.registry-user }}/${{ matrix.images.name }}
        tags: |
          type=raw,value=${{ needs.infos.outputs.lower-branch }},enable=${{ github.head_ref != 'main' }}
          type=raw,value=${{ needs.infos.outputs.short-sha }},enable=${{ inputs.TAG == '' }}
          type=raw,value=${{ format('{0}-{1}', 'pr', inputs.PR_NUMBER) }},enable=${{ inputs.PR_NUMBER != '' }}
          type=raw,value=${{ inputs.TAG }},enable=${{ inputs.TAG != '' }}
          type=raw,value=${{ inputs.MAJOR_TAG }}.${{ inputs.MINOR_TAG }},enable=${{ inputs.MAJOR_TAG != '' && inputs.MINOR_TAG != '' }}
          type=raw,value=${{ inputs.MAJOR_TAG }},enable=${{ inputs.MAJOR_TAG != '' }}
          type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ needs.infos.outputs.registry-domain }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        logout: true

    - name: Create manifest list and push
      working-directory: /tmp/digests/${{ matrix.images.name }}
      run: |
        docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
          $(printf '${{ needs.infos.outputs.registry-domain }}/${{ needs.infos.outputs.registry-user }}/${{ matrix.images.name }}@sha256:%s ' *)

    - name: Inspect image
      run: |
        docker buildx imagetools inspect ${{ needs.infos.outputs.registry-domain }}/${{ needs.infos.outputs.registry-user }}/${{ matrix.images.name }}:${{ steps.meta.outputs.version }}
