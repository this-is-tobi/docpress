name: Publish npm

on:
  workflow_call:
    inputs:
      NODE_VERSION:
        required: true
        type: string
      PNPM_VERSION:
        required: true
        type: string
      PUBLISH_PACKAGES:
        required: true
        type: boolean
    secrets:
      NPM_TOKEN:
        required: true
  workflow_dispatch:
    inputs:
      NODE_VERSION:
        description: Nodejs version used
        required: true
        type: string
        default: 20.17.0
      PNPM_VERSION:
        description: Pnpm version used
        required: true
        type: string
        default: 9.11.0
      PUBLISH_PACKAGES:
        description: Publish packages modules
        required: true
        type: boolean
        default: false

jobs:
  infos:
    name: Generate matrix
    if: ${{ inputs.PUBLISH_PACKAGES }}
    runs-on: ubuntu-latest
    outputs:
      publish-matrix: ${{ steps.infos.outputs.PUBLISH_MATRIX }}
    steps:
    - name: Checks-out repository
      uses: actions/checkout@v4

    - name: Get variables
      id: infos
      run: |
        echo "PUBLISH_MATRIX=$(jq -c '.' < ./ci/matrix/npm.json)" >> $GITHUB_OUTPUT

  publish-npm:
    name: Pubish on npm
    if: ${{ inputs.PUBLISH_PACKAGES }}
    runs-on: ubuntu-latest
    needs:
    - infos
    strategy:
      matrix:
        packages: ${{ fromJSON(needs.infos.outputs.publish-matrix) }}
    steps:
    - name: Checks-out repository
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.ref }}

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      id: pnpm-install
      with:
        version: "${{ inputs.PNPM_VERSION }}"
        run_install: false

    - name: Check for new package version
      id: check-version
      run: |
        PACKAGE_VERSION=$(jq -cr '.version' < ${{ matrix.packages.path }}/package.json)
        if [ "$(curl -s -o /dev/null -I -w %{http_code} https://registry.npmjs.org/${{ matrix.packages.name }})" = 404 ]; then
          REMOTE=false
        else
          REMOTE=$(pnpm view ${{ matrix.packages.name }} --json | jq --arg v "$PACKAGE_VERSION" 'any(.versions[] == $v; .)')
        fi
        if [ "$REMOTE" = "true" ]; then
          echo "Package ${{ matrix.packages.name }} - version $PACKAGE_VERSION already exists"
        else
          echo "Package ${{ matrix.packages.name }} - version $PACKAGE_VERSION does not exist"
        fi
        echo "REMOTE=$REMOTE" >> $GITHUB_OUTPUT

    - name: Setup Node.js
      uses: actions/setup-node@v4
      if: ${{ steps.check-version.outputs.REMOTE == 'false' }}
      with:
        node-version: "${{ inputs.NODE_VERSION }}"
        registry-url: "https://registry.npmjs.org"
        always-auth: true

    - name: Get pnpm store directory
      if: ${{ steps.check-version.outputs.REMOTE == 'false' }}
      id: pnpm-store
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

    - name: Cache node files
      if: ${{ steps.check-version.outputs.REMOTE == 'false' }}
      uses: actions/cache@v4
      with:
        path: |
          ${{ steps.pnpm-store.outputs.STORE_PATH }}
        key: node-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          node-${{ runner.os }}-${{ runner.arch }}-

    - name: Install dependencies
      if: ${{ steps.check-version.outputs.REMOTE == 'false' }}
      run: pnpm install --frozen-lockfile

    - name: Publish packages
      if: ${{ steps.check-version.outputs.REMOTE == 'false' }}
      run: |
        pnpm --filter ${{ matrix.packages.name }} run build
        pnpm --filter ${{ matrix.packages.name }} publish --no-git-checks --report-summary
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
